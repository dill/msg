\name{smooth.construct.msg.smooth.spec}
\alias{Predict.matrix.msg.spline}
%- Also NEED an `\alias' for EACH other topic documented here.
\title{Multidimensional Scaling for Generalized additive models - msg}

\description{Provides smoothing methods for multidimensional scaling-based projections of the data.

Usage is split into two cases: (1) For geographical smooths of two coordinates, within-area distances with respect to the boundary are used to create a distance matrix that is then projected into as many dimensions as required. (2) General distance smoothing where distances are calculated between observations based on all covariates supplied using Euclidean or Mahalanobis distances.

In both cases smoothing is performed using Duchon splines (see \code{\link{Duchon.spline}} for more information).
}

\usage{
\method{smooth.construct}{msg.smooth.spec}(object, data, knots)
\method{Predict.matrix}{msg.spline}(object, data)
}

\arguments{ 
\item{object}{a smooth specification object, usually generated by a term \code{s(...,bs="ds",...)}. Note that \code{xt} object is needed, see Details.}

\item{data}{a list containing just the data (including any \code{by} variable) required by this term, with names corresponding to \code{object$term} (and \code{object$by}). The \code{by} variable is the last element.} 

\item{knots}{IGNORED!}

}

\value{ An object of class \code{"msg.smooth"}. In addition to the usual elements of a smooth class documented under \code{\link{smooth.construct}}, this object will contain an element named \code{msg}:
\item{metric}{Which metric was used to calculate the distance matrix. For geographical smoothing only "WAD" (within-area distance) is permitted. Otherwise, "euclidean" or "mahalanobis" are allowed.}

\item{mds.obj}{Result of running \code{\link{cmdscale}} on the starting grid (for geographical smoothing) or the data (general distance smoothing).}

\item{dim}{Dimension of the MDS projection.}

\item{term}{Auto-generated names of the variables in the MDS space (of the form "mds-i" where i indexes the data).}

\item{data}{The data projected into MDS space.}

Plus those extra elements as documented in \code{\link{Duchon.spline}}.
}

\details{The constructor is not normally called directly, but is rather used internally by \code{\link{gam}}. To use for basis setup it is recommended to use \code{\link{smooth.construct2}}.  

The specification \code{object} will contain information on how to handle the boundary and the dimension of the MDS projection. In particular, the boundary is specified as a \code{list} or \code{data.frame} with named \code{x} and \code{y} components. The MDS dimension projection is specified as an integer. See the example below for how these are specified to the user. 

Note that for geographical smoothing the coordinates must be named \code{x} and \code{y}.

MDS dimension selection may be performed by finding the projection with the lowest GCV score. BEWARE: the GCV score is not necessarily monotonic in the number of dimensions. Automated dimension selection will appear in a later version of the package.

}

\references{
Duchon, J. (1977) Splines minimizing rotation-invariant semi-norms in Solobev spaces. in W. Shemp and K. Zeller (eds) Construction theory of functions of several variables, 85-100, Springer, Berlin.
}

\author{David Lawrence Miller \email{dave@ninepointeightone.net}}

\examples{
### Not run
# load some data
data(wt2)

# create the sample
samp.ind<-sample(1:length(wt2$data$x),250)
wt2.samp<- list(x=wt2$data$x[samp.ind],
                y=wt2$data$y[samp.ind],
                z=wt2$data$z[samp.ind]+rnorm(250)*0.9)

# fit the model
b<-gam(z~s(x,y,bs="msg",k=200,xt=list(bnd=wt2$bnd,mds.dim=5)),data=wt2.samp)

# predict
pred.grid<-data.frame(expand.grid(x=seq(min(wt2$data$x),max(wt2$data$x),len=50),
                                  y=seq(min(wt2$data$y),max(wt2$data$y),len=50)))
ind<-inSide(wt2$bnd,pred.grid$x,pred.grid$y)
pred.grid<-pred.grid[ind,]
pred.mat<-matrix(NA,50,50)
pred.mat[ind]<-predict(b,pred.grid)

# plot what happened
par(mfrow=c(2,2))
true.mat<-wt2$true.matrix

image(true.mat,main="Truth",xlab="x",ylab="y",col=heat.colors(1000))
contour(true.mat,add=T,labcex=0.3,lwd=0.5)
image(pred.mat,main="Fitted model",xlab="x",ylab="y",col=heat.colors(1000))
contour(pred.mat,add=T,labcex=0.3,lwd=0.5)

plot(b$smooth[[1]]$msg$grid,pch=19,cex=0.3,
     main="Starting grid",xlab="x",ylab="y")

plot(b$smooth[[1]]$msg$mds.obj$points,pch=19,cex=0.3,
     main="Starting grid\n(MDS space)",xlab="x",ylab="y")


}
\keyword{models} \keyword{smoothing} \keyword{spatial}%-- one or more ..
